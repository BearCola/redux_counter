{"ast":null,"code":"import _objectSpread from \"/Users/user/redux-counter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as types from \"../actions/ActionTypes\";\nconst initialState = {\n  counter: [{\n    color: \"black\",\n    number: 0\n  }]\n};\n\nfunction counter(state = initialState, action) {\n  const counters = state.counters;\n\n  switch (action.type) {\n    case types.CREATE:\n      return {\n        counters: [...counters, {\n          color: action.color,\n          number: 0\n        }]\n      };\n\n    case types.REMOVE:\n      return {\n        counters: counters.slice(0, counters.length - 1)\n      };\n\n    case types.INCREMENT:\n      return {\n        counters: [...counters.slice(0, action.index), _objectSpread({}, counters[action.index], {\n          number: counters[action.index].number + 1\n        }), ...counters.slice(action.index + 1, counters.length)]\n      };\n\n    case types.DECREMENT:\n      return {\n        counters: [...counters.slice(0, action.index), _objectSpread({}, counters[action.index], {\n          number: counters[action.index].number - 1\n        }), ...counters.slice(action.index + 1, counters.length)]\n      };\n\n    case types.SET_COLOR:\n      return {\n        counters: [...counters.slice(0, action.index), _objectSpread({}, counters[action.index], {\n          color: action.color\n        }), ...counters.slice(action.index + 1, counters.length)]\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default counter;","map":{"version":3,"sources":["/Users/user/redux-counter/src/reducers/index.js"],"names":["types","initialState","counter","color","number","state","action","counters","type","CREATE","REMOVE","slice","length","INCREMENT","index","DECREMENT","SET_COLOR"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,wBAAvB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,CACL;AACIC,IAAAA,KAAK,EAAE,OADX;AAEIC,IAAAA,MAAM,EAAE;AAFZ,GADK;AADQ,CAArB;;AASA,SAASF,OAAT,CAAiBG,KAAK,GAAGJ,YAAzB,EAAuCK,MAAvC,EAA+C;AAAA,QACnCC,QADmC,GACtBF,KADsB,CACnCE,QADmC;;AAG3C,UAAQD,MAAM,CAACE,IAAf;AACI,SAAKR,KAAK,CAACS,MAAX;AACI,aAAO;AACHF,QAAAA,QAAQ,EAAE,CACN,GAAGA,QADG,EAEN;AACIJ,UAAAA,KAAK,EAAEG,MAAM,CAACH,KADlB;AAEIC,UAAAA,MAAM,EAAE;AAFZ,SAFM;AADP,OAAP;;AASJ,SAAKJ,KAAK,CAACU,MAAX;AACI,aAAO;AACHH,QAAAA,QAAQ,EAAEA,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkBJ,QAAQ,CAACK,MAAT,GAAkB,CAApC;AADP,OAAP;;AAGJ,SAAKZ,KAAK,CAACa,SAAX;AACI,aAAO;AACHN,QAAAA,QAAQ,EAAE,CACN,GAAGA,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkBL,MAAM,CAACQ,KAAzB,CADG,oBAGCP,QAAQ,CAACD,MAAM,CAACQ,KAAR,CAHT;AAIFV,UAAAA,MAAM,EAAEG,QAAQ,CAACD,MAAM,CAACQ,KAAR,CAAR,CAAuBV,MAAvB,GAAgC;AAJtC,YAMN,GAAGG,QAAQ,CAACI,KAAT,CAAeL,MAAM,CAACQ,KAAP,GAAe,CAA9B,EAAiCP,QAAQ,CAACK,MAA1C,CANG;AADP,OAAP;;AAUJ,SAAKZ,KAAK,CAACe,SAAX;AACI,aAAO;AACHR,QAAAA,QAAQ,EAAE,CACN,GAAGA,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkBL,MAAM,CAACQ,KAAzB,CADG,oBAGCP,QAAQ,CAACD,MAAM,CAACQ,KAAR,CAHT;AAIFV,UAAAA,MAAM,EAAEG,QAAQ,CAACD,MAAM,CAACQ,KAAR,CAAR,CAAuBV,MAAvB,GAAgC;AAJtC,YAMN,GAAGG,QAAQ,CAACI,KAAT,CAAeL,MAAM,CAACQ,KAAP,GAAe,CAA9B,EAAiCP,QAAQ,CAACK,MAA1C,CANG;AADP,OAAP;;AAUJ,SAAKZ,KAAK,CAACgB,SAAX;AACI,aAAO;AACHT,QAAAA,QAAQ,EAAE,CACN,GAAGA,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkBL,MAAM,CAACQ,KAAzB,CADG,oBAGCP,QAAQ,CAACD,MAAM,CAACQ,KAAR,CAHT;AAIFX,UAAAA,KAAK,EAAEG,MAAM,CAACH;AAJZ,YAMN,GAAGI,QAAQ,CAACI,KAAT,CAAeL,MAAM,CAACQ,KAAP,GAAe,CAA9B,EAAiCP,QAAQ,CAACK,MAA1C,CANG;AADP,OAAP;;AAUJ;AACI,aAAOP,KAAP;AAjDR;AAmDH;;AAED,eAAeH,OAAf","sourcesContent":["import * as types from \"../actions/ActionTypes\";\n\nconst initialState = {\n    counter: [\n        {\n            color: \"black\",\n            number: 0\n        }\n    ]\n};\n\nfunction counter(state = initialState, action) {\n    const { counters } = state;\n\n    switch (action.type) {\n        case types.CREATE:\n            return {\n                counters: [\n                    ...counters,\n                    {\n                        color: action.color,\n                        number: 0\n                    }\n                ]\n            };\n        case types.REMOVE:\n            return {\n                counters: counters.slice(0, counters.length - 1)\n            };\n        case types.INCREMENT:\n            return {\n                counters: [\n                    ...counters.slice(0, action.index),\n                    {\n                        ...counters[action.index],\n                        number: counters[action.index].number + 1\n                    },\n                    ...counters.slice(action.index + 1, counters.length)\n                ]\n            };\n        case types.DECREMENT:\n            return {\n                counters: [\n                    ...counters.slice(0, action.index),\n                    {\n                        ...counters[action.index],\n                        number: counters[action.index].number - 1\n                    },\n                    ...counters.slice(action.index + 1, counters.length)\n                ]\n            };\n        case types.SET_COLOR:\n            return {\n                counters: [\n                    ...counters.slice(0, action.index),\n                    {\n                        ...counters[action.index],\n                        color: action.color\n                    },\n                    ...counters.slice(action.index + 1, counters.length)\n                ]\n            };\n        default:\n            return state;\n    }\n}\n\nexport default counter;\n"]},"metadata":{},"sourceType":"module"}