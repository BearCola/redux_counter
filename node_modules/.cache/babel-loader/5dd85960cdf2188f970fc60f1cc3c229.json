{"ast":null,"code":"import _objectSpread from \"/Users/user/redux-counter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as types from '../actions/ActionTypes'; // 초기 상태를 정의합니다.\n\nconst initialState = {\n  counters: [{\n    color: 'black',\n    number: 0\n  }]\n};\n\nfunction counter(state = initialState, action) {\n  // 레퍼런스 생성\n  const counters = state.counters;\n\n  switch (action.type) {\n    case types.CREATE:\n      return {\n        counters: [...counters, {\n          color: action.color,\n          number: 0\n        }]\n      };\n\n    case types.REMOVE:\n      return {\n        counters: counters.slice(0, counters.length - 1)\n      };\n\n    case types.INCREMENT:\n      return {\n        counters: [...counters.slice(0, action.index), // 선택한 인덱스의 전 아이템들\n        _objectSpread({}, counters[action.index], {\n          // 기존 객체에 \n          number: counters[action.index].number + 1 // 새 number 값 덮어쓰기\n\n        }), ...counters.slice(action.index + 1, counters.length) // 선택한 인덱스의 다음 아이템들\n        ]\n      };\n\n    case types.DECREMENT:\n      return {\n        counters: [...counters.slice(0, action.index), _objectSpread({}, counters[action.index], {\n          number: counters[action.index].number - 1\n        }), ...counters.slice(action.index + 1, counters.length)]\n      };\n\n    case types.SET_COLOR:\n      return {\n        counters: [...counters.slice(0, action.index), _objectSpread({}, counters[action.index], {\n          color: action.color\n        }), ...counters.slice(action.index + 1, counters.length)]\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default counter;","map":{"version":3,"sources":["/Users/user/redux-counter/src/reducers/index.js"],"names":["types","initialState","counters","color","number","counter","state","action","type","CREATE","REMOVE","slice","length","INCREMENT","index","DECREMENT","SET_COLOR"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,wBAAvB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,MAAM,EAAE;AAFV,GADQ;AADS,CAArB;;AASA,SAASC,OAAT,CAAiBC,KAAK,GAAGL,YAAzB,EAAuCM,MAAvC,EAA+C;AAC7C;AAD6C,QAErCL,QAFqC,GAExBI,KAFwB,CAErCJ,QAFqC;;AAI7C,UAAQK,MAAM,CAACC,IAAf;AACE,SAAKR,KAAK,CAACS,MAAX;AACE,aAAO;AACLP,QAAAA,QAAQ,EAAE,CACR,GAAGA,QADK,EAER;AACEC,UAAAA,KAAK,EAAEI,MAAM,CAACJ,KADhB;AAEEC,UAAAA,MAAM,EAAE;AAFV,SAFQ;AADL,OAAP;;AASF,SAAKJ,KAAK,CAACU,MAAX;AACE,aAAO;AACLR,QAAAA,QAAQ,EAAEA,QAAQ,CAACS,KAAT,CAAe,CAAf,EAAkBT,QAAQ,CAACU,MAAT,GAAkB,CAApC;AADL,OAAP;;AAGF,SAAKZ,KAAK,CAACa,SAAX;AACE,aAAO;AACLX,QAAAA,QAAQ,EAAE,CACR,GAAGA,QAAQ,CAACS,KAAT,CAAe,CAAf,EAAkBJ,MAAM,CAACO,KAAzB,CADK,EAC4B;AAD5B,0BAGHZ,QAAQ,CAACK,MAAM,CAACO,KAAR,CAHL;AAGqB;AAC3BV,UAAAA,MAAM,EAAEF,QAAQ,CAACK,MAAM,CAACO,KAAR,CAAR,CAAuBV,MAAvB,GAAgC,CAJlC,CAIoC;;AAJpC,YAMR,GAAGF,QAAQ,CAACS,KAAT,CAAeJ,MAAM,CAACO,KAAP,GAAe,CAA9B,EAAiCZ,QAAQ,CAACU,MAA1C,CANK,CAM6C;AAN7C;AADL,OAAP;;AAUF,SAAKZ,KAAK,CAACe,SAAX;AACE,aAAO;AACLb,QAAAA,QAAQ,EAAE,CACR,GAAGA,QAAQ,CAACS,KAAT,CAAe,CAAf,EAAkBJ,MAAM,CAACO,KAAzB,CADK,oBAGHZ,QAAQ,CAACK,MAAM,CAACO,KAAR,CAHL;AAINV,UAAAA,MAAM,EAAEF,QAAQ,CAACK,MAAM,CAACO,KAAR,CAAR,CAAuBV,MAAvB,GAAgC;AAJlC,YAMR,GAAGF,QAAQ,CAACS,KAAT,CAAeJ,MAAM,CAACO,KAAP,GAAe,CAA9B,EAAiCZ,QAAQ,CAACU,MAA1C,CANK;AADL,OAAP;;AAUF,SAAKZ,KAAK,CAACgB,SAAX;AACE,aAAO;AACLd,QAAAA,QAAQ,EAAE,CACR,GAAGA,QAAQ,CAACS,KAAT,CAAe,CAAf,EAAkBJ,MAAM,CAACO,KAAzB,CADK,oBAGHZ,QAAQ,CAACK,MAAM,CAACO,KAAR,CAHL;AAINX,UAAAA,KAAK,EAAEI,MAAM,CAACJ;AAJR,YAMR,GAAGD,QAAQ,CAACS,KAAT,CAAeJ,MAAM,CAACO,KAAP,GAAe,CAA9B,EAAiCZ,QAAQ,CAACU,MAA1C,CANK;AADL,OAAP;;AAUF;AACE,aAAON,KAAP;AAjDJ;AAmDD;;AAED,eAAeD,OAAf","sourcesContent":["import * as types from '../actions/ActionTypes';\n\n// 초기 상태를 정의합니다.\nconst initialState = {\n  counters: [\n    {\n      color: 'black',\n      number: 0\n    }\n  ]\n};\n\nfunction counter(state = initialState, action) {\n  // 레퍼런스 생성\n  const { counters } = state;\n\n  switch (action.type) {\n    case types.CREATE:\n      return {\n        counters: [\n          ...counters,\n          {\n            color: action.color,\n            number: 0\n          }\n        ]\n      };\n    case types.REMOVE:\n      return {\n        counters: counters.slice(0, counters.length - 1)\n      };\n    case types.INCREMENT:\n      return {\n        counters: [\n          ...counters.slice(0, action.index), // 선택한 인덱스의 전 아이템들\n          {\n            ...counters[action.index], // 기존 객체에 \n            number: counters[action.index].number + 1 // 새 number 값 덮어쓰기\n          },\n          ...counters.slice(action.index + 1, counters.length) // 선택한 인덱스의 다음 아이템들\n        ]\n      };\n    case types.DECREMENT: \n      return {\n        counters: [\n          ...counters.slice(0, action.index),\n          {\n            ...counters[action.index], \n            number: counters[action.index].number - 1\n          },\n          ...counters.slice(action.index + 1, counters.length)        \n        ]\n      };\n    case types.SET_COLOR:\n      return {\n        counters: [\n          ...counters.slice(0, action.index),\n          {\n            ...counters[action.index], \n            color: action.color\n          },\n          ...counters.slice(action.index + 1, counters.length)       \n        ]\n      };\n    default:\n      return state;\n  }\n}\n\nexport default counter;\n"]},"metadata":{},"sourceType":"module"}